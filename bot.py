from telegram.constants import ParseMode
import logging
from datetime import datetime

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    InputFile
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ConversationHandler,
    PicklePersistence
)
#num_tracks=0
# <<< –í–ê–ñ–ù–û: –£–ö–ê–ó–ê–¢–¨ –°–í–û–ô –¢–û–ö–ï–ù –ò ADMIN_CHAT_ID >>>
BOT_TOKEN = "7327729790:AAGpTMokRbruUDvEI3gKsNI9pDAiXk8pCek"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
ADMIN_CHAT_ID = 6234941994          # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é, –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# -----------------------------------------------------------------------------
# –•—Ä–∞–Ω–∏–º (–≤—Ä–µ–º–µ–Ω–Ω–æ, –≤ –ø–∞–º—è—Ç–∏) —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∏—Ö ID.
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ, –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î.
#
# –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ORDERS_DB[order_id]:
# {
#   "order_id": str,
#   "user_id": int,
#   "username": str,
#   "created_at": datetime,
#   "num_tracks": int,
#   "type_order": "mixing" –∏–ª–∏ "beat",
#   "status": "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" –∏–ª–∏ "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω",
#   "price_rub": int,
#   "description": str,
#   "materials_file_id": str,  # file_id –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# }
# -----------------------------------------------------------------------------
ORDERS_DB = {}
ORDER_COUNTER = 1  # –°—á—ë—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ (–ø—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ID)

# -----------------------------------------------------------------------------
# –°–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler (–ª–æ–≥–∏–∫–∞ –∑–∞–∫–∞–∑–∞ —Å–≤–µ–¥–µ–Ω–∏—è)
# -----------------------------------------------------------------------------
(
    STATE_CHOOSE_MAIN_MENU,
    STATE_NEW_ORDER_MENU,
    STATE_HELP_MENU,
    STATE_ABOUT_MENU,
    STATE_MY_ORDERS_MENU,

    STATE_MIXING_ASK_TRACKS,
    STATE_MIXING_WAIT_MATERIALS,
    STATE_MIXING_WAIT_DESCRIPTION,
    STATE_MIXING_WAIT_PAYMENT_CONFIRM
) = range(9)

# -----------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
# -----------------------------------------------------------------------------
def main_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    buttons = [
        [InlineKeyboardButton("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="main_new_order")],
        [InlineKeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="main_my_orders")],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="main_help")],
        [InlineKeyboardButton("–û –Ω–∞—Å", callback_data="main_about")],
    ]
    return InlineKeyboardMarkup(buttons)

def new_order_menu_keyboard():
    """–ü–æ–¥–º–µ–Ω—é - –ù–æ–≤—ã–π –∑–∞–∫–∞–∑."""
    buttons = [
        [InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å —Å–≤–µ–¥–µ–Ω–∏–µ", callback_data="new_order_mixing")],
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –±–∏—Ç", callback_data="new_order_beat")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ]
    return InlineKeyboardMarkup(buttons)

def help_menu_keyboard():
    """–ü–æ–¥–º–µ–Ω—é - –ü–æ–º–æ—â—å."""
    buttons = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ]
    return InlineKeyboardMarkup(buttons)

def about_menu_keyboard():
    """–ü–æ–¥–º–µ–Ω—é - –û –Ω–∞—Å."""
    buttons = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ]
    return InlineKeyboardMarkup(buttons)

def my_orders_menu_keyboard(user_orders):
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    user_orders ‚Äì —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (—Å–ª–æ–≤–∞—Ä–µ–π) –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    buttons = []
    for order in user_orders:
        order_id = order["order_id"]
        status = order["status"]
        text_btn = f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} ({status})"
        buttons.append([InlineKeyboardButton(text_btn, callback_data=f"order_details:{order_id}")])

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(buttons)

def order_details_keyboard(order_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞."""
    buttons = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_my_orders")],
    ]
    return InlineKeyboardMarkup(buttons)

def mixing_order_payment_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –∫–æ–≥–¥–∞ –±–æ—Ç –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑."""
    buttons = [
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="mixing_confirm_payment")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="mixing_cancel_order")],
    ]
    return InlineKeyboardMarkup(buttons)

def go_to_main_menu_keyboard():
    """–ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–µ –æ—à–∏–±–∫–∏/—Å–ø–æ—Ä–∞)."""
    buttons = [
        [InlineKeyboardButton("–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(buttons)

def admin_order_keyboard(order_id):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—Å–ø–æ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É.
    """
    buttons = [
        [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"admin_accept:{order_id}")],
        [InlineKeyboardButton("–û—Å–ø–æ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"admin_dispute:{order_id}")],
    ]
    return InlineKeyboardMarkup(buttons)

# -----------------------------------------------------------------------------
# /start –∫–æ–º–∞–Ω–¥–∞ ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# -----------------------------------------------------------------------------
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏ /start –≤—ã–≤–æ–¥–∏–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await update.message.reply_text(
        text=("<b>–°–∞–ª—é—Ç –±—Ä–æ!</b>üé∂\n–ò—â–µ—à—å —á–∏—Å—Ç—ã–π –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–≤—É–∫ - <b>—Ç–µ–±–µ –∫ –Ω–∞–º!l</b> –ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –≤—Å–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–≤–æ–µ–≥–æ —Ç—Ä–µ–∫–∞: —Å–≤–µ–¥–µ–Ω–∏–µ, –º–∞—Å—Ç–µ—Ä–∏–Ω–≥, —Ç—é–Ω–∏–Ω–≥ –≤–æ–∫–∞–ª–∞, —Ç–∞–∫–∂–µ –±–∏—Ç—ã –ø–æ–¥ –ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç –∏ —Å—Ç–∏–ª—å.\n\n"
        "–ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n"
        "üéôÔ∏è –°–≤–µ–¥–µ–Ω–∏–µ ‚Äî 5000—Ä\n\n"
        "ü•Å –ë–∏—Ç—ã:\n    ‚Ä¢ Exclusive –ø—Ä–∞–≤–∞ - –æ—Ç 20000—Ä\n    ‚Ä¢ Premium Trackout (Multitrack) - –æ—Ç 6000—Ä\n    ‚Ä¢ Premium lease - –æ—Ç 3000—Ä\n\n"
        "–í—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –ª—é–¥–µ–π. –ü–∏—à–∏—Ç–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è - –æ–±—Å—É–¥–∏–º –≤–∞—à–∏ –∏–¥–µ–∏ –∏ –Ω–∞–π–¥—ë–º –ª—É—á—à–∏–π –∑–≤—É–∫ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç—Ä–µ–∫–∞.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
        reply_markup=main_menu_keyboard(),
        parse_mode=ParseMode.HTML
    )
    return STATE_CHOOSE_MAIN_MENU

# -----------------------------------------------------------------------------
# CALLBACK_QUERY ‚Äì –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
# -----------------------------------------------------------------------------
async def callbacks_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–æ—É—Ç–µ—Ä –¥–ª—è callback_data."""
    query = update.callback_query
    data = query.data
    await query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º '—á–∞—Å–∏–∫–∏' –Ω–∞ –∫–Ω–æ–ø–∫–µ

    # --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
    if data == "main_new_order":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–æ–¥–º–µ–Ω—é "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑"
        await query.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞:",
            reply_markup=new_order_menu_keyboard()
        )
        return STATE_NEW_ORDER_MENU

    elif data == "main_my_orders":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–æ–¥–º–µ–Ω—é "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"
        user_id = query.from_user.id
        user_orders = [o for o in ORDERS_DB.values() if o["user_id"] == user_id]
        if not user_orders:
            await query.message.edit_text(
                text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.",
                reply_markup=main_menu_keyboard()
            )
            return STATE_CHOOSE_MAIN_MENU
        else:
            await query.message.edit_text(
                text="–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:",
                reply_markup=my_orders_menu_keyboard(user_orders)
            )
            return STATE_MY_ORDERS_MENU

    elif data == "main_help":
        # –ü–æ–¥–º–µ–Ω—é "–ü–æ–º–æ—â—å"
        help_text = (
            "–ü–æ–º–æ—â—å –ø–æ –∑–∞–∫–∞–∑—É —Å–≤–µ–¥–µ–Ω–∏—è:\n"
            "1) –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–æ—Ä–æ–≥–∏ –≤–æ–∫–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .wav –∏–ª–∏ .aiff\n"
            "2) –ë–∏—Ç —Ç–æ–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .wav\n"
            "3) –ï—Å–ª–∏ —É –±–∏—Ç–∞ –µ—Å—Ç—å —Ç—Ä–µ–∫-–∞—É—Ç (–¥–æ—Ä–æ–∂–∫–∏ –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞), —Ç–∞–∫–∂–µ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ .wav\n"
            "\n"
            "–ü–æ–º–æ—â—å –ø–æ –ø–æ–∫—É–ø–∫–µ –±–∏—Ç–æ–≤ (–ø—Ä–∞–≤–∞ –∏ –ª–∏—Ü–µ–Ω–∑–∏–∏):\n"
            "1) –î–ª—è –Ω–µ—ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏—Ç, –Ω–æ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∑–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º.\n"
            "2) –î–ª—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞, –∏ –±–∏—Ç —Å–Ω–∏–º–∞–µ—Ç—Å—è —Å –ø—Ä–æ–¥–∞–∂–∏.\n"
            "\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '–û –Ω–∞—Å'."
        )
        await query.message.edit_text(
            text=help_text,
            reply_markup=help_menu_keyboard()
        )
        return STATE_HELP_MENU

    elif data == "main_about":
        # –ü–æ–¥–º–µ–Ω—é "–û –Ω–∞—Å"
        about_text = (
            "–û –Ω–∞—Å:\n"
            "- –ú—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞–Ω–∏–º–∞–µ–º—Å—è —Å–≤–µ–¥–µ–Ω–∏–µ–º –∏ –º–∞—Å—Ç–µ—Ä–∏–Ω–≥–æ–º.\n"
            "- –ü—Ä–æ–¥–∞—ë–º –±–∏—Ç—ã —Ä–∞–∑–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞.\n"
            "- –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –∞—Ä—Ç–∏—Å—Ç–∞–º–∏ —Å–º. –Ω–∏–∂–µ.\n"
            "\n"
            "–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:\n"
            "- Telegram: @fourxprod\n"
            "- –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç: (—Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏)\n"
            "- –ö–ª–∏–µ–Ω—Ç—ã: (–ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å)\n"
        )
        await query.message.edit_text(
            text=about_text,
            reply_markup=about_menu_keyboard()
        )
        return STATE_ABOUT_MENU

    elif data == "back_to_main":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.message.edit_text(
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard()
        )
        return STATE_CHOOSE_MAIN_MENU

    # --- –ü–æ–¥–º–µ–Ω—é "–ú–æ–∏ –∑–∞–∫–∞–∑—ã" ---
    elif data.startswith("order_details:"):
        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        _, order_id_str = data.split(":")
        order_id = order_id_str
        order = ORDERS_DB.get(order_id)
        if not order:
            # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª—ë–Ω)
            await query.message.edit_text(
                text="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=my_orders_menu_keyboard([])
            )
            return STATE_MY_ORDERS_MENU

        details_text = (
            f"**–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}**\n"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
            f"–¢–∏–ø –∑–∞–∫–∞–∑–∞: {'–°–≤–µ–¥–µ–Ω–∏–µ' if order['type_order'] == 'mixing' else '–ë–∏—Ç'}\n"
            f"–ö–æ–ª-–≤–æ —Ç—Ä–µ–∫–æ–≤: {order.get('num_tracks', '-')}\n"
            f"–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: {order.get('price_rub', 0)} —Ä—É–±.\n"
            f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {order.get('description', '-')}\n"
            f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
        )
        await query.message.edit_text(
            text=details_text,
            parse_mode="Markdown",
            reply_markup=order_details_keyboard(order_id)
        )
        return STATE_MY_ORDERS_MENU

    elif data == "back_to_my_orders":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
        user_id = query.from_user.id
        user_orders = [o for o in ORDERS_DB.values() if o["user_id"] == user_id]
        await query.message.edit_text(
            text="–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:",
            reply_markup=my_orders_menu_keyboard(user_orders)
        )
        return STATE_MY_ORDERS_MENU

    # --- –ü–æ–¥–º–µ–Ω—é "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑" ---
    elif data == "new_order_beat":
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–°–∫–æ—Ä–æ" –∏ –∫–Ω–æ–ø–∫—É "–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        await query.message.edit_text(
            text="–†–∞–∑–¥–µ–ª –ø–æ–∫—É–ø–∫–∏ –±–∏—Ç–æ–≤: –°–∫–æ—Ä–æ!\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=go_to_main_menu_keyboard()
        )
        # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä, –æ—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞
        return STATE_CHOOSE_MAIN_MENU

    elif data == "new_order_mixing":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ü–µ–Ω–∞—Ä–∏—é "–ó–∞–∫–∞–∑–∞—Ç—å —Å–≤–µ–¥–µ–Ω–∏–µ": —Å–ø—Ä–æ—Å–∏—Ç—å –∫–æ–ª-–≤–æ —Ç—Ä–µ–∫–æ–≤
        await query.message.edit_text(
            text="–°–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –¥–ª—è —Å–≤–µ–¥–µ–Ω–∏—è? (–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ)",
        )
        return STATE_MIXING_ASK_TRACKS

    # --- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ "–ó–∞–∫–∞–∑–∞—Ç—å —Å–≤–µ–¥–µ–Ω–∏–µ": —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ ---
    elif data == "mixing_confirm_payment":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª
        # –ü–æ—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        user_data = context.user_data
        current_order = user_data.get("current_order", {})
        if not current_order:
            # –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —É–¥–∞–ª—ë–Ω
            await query.message.edit_text(
                text="–ö–∞–∂–µ—Ç—Å—è, –∑–∞–∫–∞–∑ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_menu_keyboard()
            )
            return STATE_CHOOSE_MAIN_MENU

        order_id = current_order["order_id"]
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π DB
        ORDERS_DB[order_id] = current_order

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        text_for_admin = (
            "–ï–±–∞—Ç—å —Ç–µ–±–µ –¥—Ä–æ–ø–Ω—É–ª–∏ –¥–µ–Ω—å–≥–∏!\n\n"
            f"–ù–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞: {current_order['name']}\n"
            f"–¢–≥-–∞–π–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞: @{current_order['username']}\n"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {current_order['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
            f"–ö–æ–ª-–≤–æ —Ç—Ä–µ–∫–æ–≤: {current_order['num_tracks']}\n"
            f"–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: {current_order['price_rub']} —Ä—É–±.\n"
            f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {current_order['description']}\n"
            "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã: (—Å–º. –≤–ª–æ–∂–µ–Ω–∏—è –≤—ã—à–µ)\n\n"
            "–û–∂–∏–¥–∞–µ—Ç –±–ª—è–¥—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—É–∫–∞!"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª (zip) ‚Äì –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
            materials_file_id = current_order.get("materials_file_id")
            if materials_file_id:
                await context.bot.send_document(
                    chat_id=ADMIN_CHAT_ID,
                    document=materials_file_id,
                    caption=text_for_admin,
                    reply_markup=admin_order_keyboard(order_id)
                )
            else:
                # –ï—Å–ª–∏ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ—Ç —Ñ–∞–π–ª–∞
                await context.bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=text_for_admin,
                    reply_markup=admin_order_keyboard(order_id)
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await query.message.edit_text(
            text="–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã.\n"
                 "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=main_menu_keyboard()
        )

        # –û—á–∏—â–∞–µ–º current_order
        user_data["current_order"] = {}
        return STATE_CHOOSE_MAIN_MENU

    elif data == "mixing_cancel_order":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑¬ª, —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏
        user_data = context.user_data
        #user_data["current_order"]["order_id"] = None
        del ORDERS_DB[user_data["current_order"]["order_id"]]

        #del  user_data["current_order"]
        await query.message.edit_text(
            text="–ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard()
        )
        return STATE_CHOOSE_MAIN_MENU

    # --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ ---
    elif data.startswith("admin_accept:"):
        _, order_id_str = data.split(":")
        order_id = order_id_str
        order = ORDERS_DB.get(order_id)
        if order:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            order["status"] = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"
            ORDERS_DB[order_id] = order

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
            user_id = order["user_id"]
            text_for_user = (
                "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n"
                f"–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: @fourxprod\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑."
            )
            try:
                await context.bot.send_message(chat_id=user_id, text=text_for_user)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (—á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏)
            await query.message.edit_text(
                text="–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
            )
        else:
            await query.message.edit_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        return ConversationHandler.END

    elif data.startswith("admin_dispute:"):
        _, order_id_str = data.split(":")
        order_id = order_id_str
        order = ORDERS_DB.get(order_id)
        if order:
            # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–ª–∏ —Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å "–æ—Ç–º–µ–Ω—ë–Ω" ‚Äì —Ä–µ—à–∞–π—Ç–µ, –∫–∞–∫ —É–¥–æ–±–Ω–µ–µ.
            # –í —Ç–µ–∫—Å—Ç–µ –∑–∞–¥–∞—á–∏ —Å–∫–∞–∑–∞–Ω–æ "–æ–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞, –∑–∞–∫–∞–∑ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω."
            # –î–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ ‚Äì –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏–º –∏–∑ ORDERS_DB.
            del ORDERS_DB[order_id]

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            user_id = order["user_id"]
            text_for_user = (
                "–û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞, –∑–∞–∫–∞–∑ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.\n"
                "–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É, –Ω–æ –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞,\n"
                "—Ç–æ —Å–≤—è–∂–∏—Ç–µ—Å—å –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º: @fourxprod"
            )
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=text_for_user,
                    reply_markup=go_to_main_menu_keyboard()
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

            await query.message.edit_text("–ó–∞–∫–∞–∑ –æ—Å–ø–æ—Ä–µ–Ω: –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
        else:
            await query.message.edit_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        return ConversationHandler.END

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ:
    await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    return STATE_CHOOSE_MAIN_MENU

# -----------------------------------------------------------------------------
# –õ–æ–≥–∏–∫–∞ ConversationHandler –¥–ª—è —à–∞–≥–∞: –ø–æ–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª-–≤–æ —Ç—Ä–µ–∫–æ–≤
# -----------------------------------------------------------------------------
async def mixing_ask_tracks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç (–≤ —Å–æ–æ–±—â–µ–Ω–∏–∏) –∫–æ–ª-–≤–æ —Ç—Ä–µ–∫–æ–≤."""
    message = update.message
    text = message.text
    user_data = context.user_data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
    if not text.isdigit():
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∫–æ–ª-–≤–æ —Ç—Ä–µ–∫–æ–≤).")
        return STATE_MIXING_ASK_TRACKS

    num_tracks = int(text)
    user_data["current_order"] = {
        "order_id": None,
        "user_id": message.from_user.id,
        "username": message.from_user.username or "N/A",  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è Telegram-username
        "name": message.from_user.first_name + (" " + message.from_user.last_name if message.from_user.last_name else ""),  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è
        "created_at": datetime.now(),
        "num_tracks": num_tracks,
        "type_order": "mixing",
        "status": "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        "price_rub": 5000 * num_tracks,
        "description": "",
        "materials_file_id": None,
    }

    await message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, ZIP-–∞—Ä—Ö–∏–≤ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ (–¥–æ—Ä–æ–≥–∏ –≤–æ–∫–∞–ª–∞ –∏ –±–∏—Ç)."
    )
    return STATE_MIXING_WAIT_MATERIALS

# -----------------------------------------------------------------------------
# –ü—Ä–∏–Ω–∏–º–∞–µ–º ZIP (–∏–ª–∏ –ª—é–±–æ–π —Ñ–∞–π–ª) —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
# -----------------------------------------------------------------------------
async def mixing_receive_materials(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ñ–¥—ë–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Ä—Ö–∏–≤ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏."""
    message = update.message
    user_data = context.user_data
    current_order = user_data.get("current_order", {})

    if not message.document:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∞—Ä—Ö–∏–≤ (—Ñ–∞–π–ª) —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏.")
        return STATE_MIXING_WAIT_MATERIALS

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id
    file_id = message.document.file_id
    current_order["materials_file_id"] = file_id
    user_data["current_order"] = current_order

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ç–µ—Ö. –∑–∞–¥–∞–Ω–∏—è
    await message.reply_text("–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã –∏ —Ç.–¥.")
    return STATE_MIXING_WAIT_DESCRIPTION

# -----------------------------------------------------------------------------
# –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (—Ç–µ—Ö. –∑–∞–¥–∞–Ω–∏–µ)
# -----------------------------------------------------------------------------
async def mixing_receive_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ—Ö. –∑–∞–¥–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    message = update.message
    user_data = context.user_data
    current_order = user_data.get("current_order", {})

    description = message.text
    current_order["description"] = description

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º order_id, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î (–ø–æ–∫–∞ —Å—Ç–∞—Ç—É—Å "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    global ORDER_COUNTER
    order_id = str(ORDER_COUNTER)
    ORDER_COUNTER += 1
    current_order["order_id"] = order_id
    ORDERS_DB[order_id] = current_order

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –æ–ø–ª–∞—Ç—ã
    await message.reply_text(
        text=(
            
            "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ –°–ë–ü:\n"
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +7 923 635 69 84\n"
            "–ë–∞–Ω–∫: –¢-–ë–∞–Ω–∫ / –°–±–µ—Ä–±–∞–Ω–∫\n"
            "–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: –°—Ç–µ–ø–∞–Ω –ë. –ü.\n"
            "–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: "+str(current_order['price_rub'])+"\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª, "
            "–∏–ª–∏ ¬´–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑¬ª —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ."
        ),
        reply_markup=mixing_order_payment_keyboard()
    )
    return STATE_MIXING_WAIT_PAYMENT_CONFIRM

# -----------------------------------------------------------------------------
# –°–æ–∑–¥–∞—ë–º ConversationHandler
# -----------------------------------------------------------------------------
def main():
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start_command)],
        states={
            STATE_CHOOSE_MAIN_MENU: [
                CallbackQueryHandler(callbacks_router),
            ],
            STATE_NEW_ORDER_MENU: [
                CallbackQueryHandler(callbacks_router),
            ],
            STATE_HELP_MENU: [
                CallbackQueryHandler(callbacks_router),
            ],
            STATE_ABOUT_MENU: [
                CallbackQueryHandler(callbacks_router),
            ],
            STATE_MY_ORDERS_MENU: [
                CallbackQueryHandler(callbacks_router),
            ],
            STATE_MIXING_ASK_TRACKS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, mixing_ask_tracks)
            ],
            STATE_MIXING_WAIT_MATERIALS: [
                MessageHandler(filters.Document.ALL, mixing_receive_materials),
                MessageHandler(filters.TEXT, mixing_receive_materials),
            ],
            STATE_MIXING_WAIT_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, mixing_receive_description)
            ],
            STATE_MIXING_WAIT_PAYMENT_CONFIRM: [
                CallbackQueryHandler(callbacks_router),
            ],
        },
        fallbacks=[
            CommandHandler("start", start_command),
        ],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π ConversationHandler
    application.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    application.add_handler(CallbackQueryHandler(callbacks_router))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (Long Polling)
    application.run_polling()

if __name__ == "__main__":
    main()
